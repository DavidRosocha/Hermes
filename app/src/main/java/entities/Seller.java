package entities;

import java.util.ArrayList;

/**
 * seller class representing a seller account. manages listings, reviews, and ratings.
 */
public class Seller extends Account {
    private final String sellerId;
    private ArrayList<Listing> listings;
    private ArrayList<Review> reviews;
    private double userRating;
    private int numRating;
    private static int sellerIdMemory = 0;

    /**
     * constructor to initialize a seller account with all details.
     *
     * @param name               the name of the seller
     * @param email              the email of the seller
     * @param password           the password for the seller account
     * @param phoneNumber        the phone number of the seller
     * @param profilePicture     the profile picture in byte array format
     * @param accountCreationDate the account creation timestamp
     * @param age                the age of the seller
     * @param residenceCity      the city where the seller resides
     * @param sellerId           the id of the seller (autogenerated)
     * @param listings           the list of items the seller has listed
     */
    public Seller(String name, String email, String password, String phoneNumber,
                  byte[] profilePicture, long accountCreationDate, int age, String residenceCity, String sellerId, ArrayList<Listing> listings) {

        super(name, email, password, "seller", phoneNumber, profilePicture, accountCreationDate, age, residenceCity, sellerId);

        this.sellerId = String.valueOf(sellerIdMemory);
        sellerIdMemory++;
        this.listings = listings;
    }

    /**
     * constructor to initialize a seller account with basic details.
     *
     * @param name     the name of the seller
     * @param email    the email of the seller
     * @param password the password for the seller account
     */
    public Seller(String name, String email, String password) {
        super(name, email, password, "seller");

        this.sellerId = String.valueOf(sellerIdMemory);
        sellerIdMemory++;
    }

    /**
     * getter for seller id.
     *
     * @return the seller's id
     */
    public String getSellerID() {
        return sellerId;
    }

    /**
     * creates a new listing for the seller.
     *
     * @param listing the listing to be added
     */
    public void createListing(Listing listing) {
        listings.add(listing);
    }

    /**
     * removes a listing for the seller.
     *
     * @param listing the listing to be removed
     */
    public void removeListing(Listing listing) {
        listings.remove(listing);
    }

    /**
     * edits an existing listing for the seller.
     *
     * @param listID     the id of the listing to be edited
     * @param newListing the updated listing information
     */
    public void editListing(String listID, Listing newListing) {
        for (Listing list : listings) {
            if (list.getListingID().equals(listID)) {
                list = newListing;
            }
        }
    }

    /**
     * retrieves all reviews for the seller.
     *
     * @return a list of reviews for the seller
     */
    public ArrayList<Review> getReviews() {
        return reviews;
    }

    /**
     * adds a new review for the seller and updates the rating.
     *
     * @param review the review to be added
     */
    public void addReview(Review review) {
        reviews.add(review);
        userRating += review.getRating();
        numRating++;
    }

    /**
     * calculates the average rating of the seller.
     *
     * @param review the review that triggered the rating calculation
     * @return the average rating
     */
    public double ratingCalculation(Review review) {
        return userRating / numRating;
    }
}